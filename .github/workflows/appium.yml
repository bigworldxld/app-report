name: Appium Server Control

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (start/stop)'
        required: true
        type: choice
        options:
          - start
          - stop

jobs:
  control-appium:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 安装和启动 ngrok
      - name: Setup ngrok
        if: github.event.inputs.action == 'start'
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          # 安装 ngrok
          npm install -g ngrok
          echo "Installing ngrok..."
          
          # 验证 token 是否存在
          if [ -z "$NGROK_AUTH_TOKEN" ]; then
            echo "Error: NGROK_AUTH_TOKEN is not set"
            exit 1
          fi
          
          # 创建配置目录（使用新的 XDG 路径）
          mkdir -p ~/.config/ngrok
          
          # 写入配置文件
          cat > ~/.config/ngrok/ngrok.yml << EOF
          version: 2
          authtoken: $NGROK_AUTH_TOKEN
          region: ap
          web_addr: localhost:4040
          tunnels:
            appium:
              addr: 4723
              proto: tcp  # 修改为 TCP 协议
              inspect: false
          EOF
          
          # 验证配置
          echo "Current ngrok config:"
          cat ~/.config/ngrok/ngrok.yml
          
          # 验证安装
          ngrok --version

      - name: Start Appium Server
        if: github.event.inputs.action == 'start'
        run: |
          # 安装 Appium 和依赖
          npm install -g appium@next
          appium driver install uiautomator2
          appium plugin install images
          appium plugin install --source=npm appium-ocr-plugin

          echo "Starting Appium server..."
          nohup appium --allow-cors --address 0.0.0.0 --port 4723 --use-plugins=images,ocr > appium.log 2>&1 &
          sleep 5  # 等待服务器启动

          # 检查 Appium Server 是否正在运行
          if ! pgrep -f appium > /dev/null; then
            echo "Error: Appium server failed to start"
            cat appium.log
            exit 1
          fi

          # 检查端口是否已监听
          if ! netstat -tuln | grep 4723 > /dev/null; then
            echo "Error: Appium server is not listening on port 4723"
            exit 1
          fi

          echo "Appium server started successfully"
          
          # 启动 ngrok TCP 隧道
          echo "Starting ngrok tunnel..."
          nohup ngrok tcp 4723 > ngrok.log 2>&1 &
          sleep 10  # 给 ngrok 更多启动时间

          # 检查 ngrok 是否正在运行
          if ! pgrep -f ngrok > /dev/null; then
            echo "Error: ngrok failed to start"
            cat ngrok.log
            exit 1
          fi

          # 获取 ngrok URL
          MAX_RETRIES=30
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i/$MAX_RETRIES to get ngrok URL..."
            
            if curl -s http://localhost:4040/api/tunnels > /dev/null; then
              NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[] | select(.proto == "tcp") | .public_url')
              if [ ! -z "$NGROK_URL" ]; then
                echo "Successfully got ngrok URL: $NGROK_URL"
                break
              fi
            fi
            
            if [ $i -eq $MAX_RETRIES ]; then
              echo "Failed to get ngrok URL after $MAX_RETRIES attempts"
              echo "ngrok logs:"
              cat ngrok.log
              exit 1
            fi
            
            echo "Waiting for ngrok to start... ($i/$MAX_RETRIES)"
            sleep 2
          done
          
          echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV
          
          # 创建状态文件
          echo "{
            \"status\": \"running\",
            \"ngrok_url\": \"$NGROK_URL\",
            \"local_url\": \"http://localhost:4723\",
            \"timestamp\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",
            \"run_id\": \"${GITHUB_RUN_ID}\"
          }" > server-status.json
          
          echo "Server URL: $NGROK_URL"
          echo "Local URL: http://localhost:4723"
          echo "Server logs:"
          tail -n 20 appium.log

      - name: Stop Appium Server
        if: github.event.inputs.action == 'stop'
        run: |
          # 停止 ngrok
          pkill -f ngrok || true
          
          # 停止 Appium
          if pgrep -f appium > /dev/null; then
            echo "Stopping Appium server..."
            pkill -f appium
            echo "Appium server stopped"
          fi
          
          # 更新状态文件
          echo "{
            \"status\": \"stopped\",
            \"ngrok_url\": null,
            \"timestamp\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
          }" > server-status.json

      - name: Upload server status
        uses: actions/upload-artifact@v4
        with:
          name: server-status
          path: server-status.json
          retention-days: 1

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-logs
          path: |
            appium.log
            ngrok.log
          retention-days: 1